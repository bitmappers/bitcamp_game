import * as config from "gameconfig.js6";

export class Tile {
    constructor(type, style, isDiggable, isPassable, isClimable) {
        this._type = type;
        this._style = style;
        this._isDiggable = isDiggable;
        this._isPassable = isPassable;
        this._isClimable = isClimable;
    }

    get type() {
        return this._type;
    }

    get style() {
        return this._style;
    }

    get isDiggable() {
        return this._isDiggable;
    }

    get isPassable() {
        return this._isPassable;
    }

    get isClimable() {
        return this._isClimable;
    }

    draw(ctx, canvasX, canvasY) {
        ctx.fillStyle = this._style;
        ctx.fillRect(canvasX, canvasY, config.cellSize, config.cellSize);
    }
}

export class EmptyTile extends Tile {
    constructor() {
        super('empty', 'rgb(255,255,255)', false, true, false);
    }

    draw() {}
}

export var DIRT_TILE_1 = new Tile('dirt_1', 'rgb(89,49,9)', true, false, true);
export var DIRT_TILE_2 = new Tile('dirt_2', 'rgb(40,20,4)', true, false, true);
export var DIRT_TILE_3 = new Tile('dirt_3', 'rgb(140,117,62)', true, false, true);
export var BEDROCK = new Tile('bedrock', 'rgb(33,19,3)', false, false, true);
export var EMPTY_TILE = new EmptyTile();

export class Grid {
    constructor(gridWidth, gridHeight) {
        this._width = gridWidth;
        this._height = gridHeight;
        this.grid = [];

        for (let x = 0; x < gridWidth; x++) {
            let col = [];
            for (let y = 0; y < gridHeight; y++) {
                if (y == gridHeight - 1
                        || y == 0
                        || x == 0
                        || x == gridWidth - 1) {
                    col.push(BEDROCK);
                    continue;
                }
                if (y < gridHeight / 2) {
                    col.push(EMPTY_TILE);
                    continue;
                }

                // Normal dirt
                let v = Math.random();
                if (v < 0.5) {
                    col.push(DIRT_TILE_1);
                } else if (v < 0.7) {
                    col.push(DIRT_TILE_2);
                } else {
                    col.push(DIRT_TILE_3);
                }
            }
            this.grid.push(col);
        }
    }

    get width() {
        return this._width;
    }

    get height() {
        return this._height;
    }

    getCell(x, y) {
        return this.grid[x][y];
    }

    setCell(x, y, v) {
        this.grid[x][y] = v;
    }

    isCellDiggable(x, y) {
        return this.grid[x][y].isDiggable;
    }

    isCellPassable(x, y) {
        return this.grid[x][y]._isPassable;
    }

    isCellNextToClimable(x, y) {
        for (let xi = x - 1; xi <= x + 1; xi++) {
            for (let yi = y - 1; yi <= y + 1; yi++) {
                if (this.areValidCoords(xi, yi)
                        && this.getCell(xi, yi).isClimable) {
                    return true;
                }
            }
        }
        return false;
    }

    areValidCoords(x, y) {
        return x >= 0 && x < this._width && y >= 0 && y < this._height;
    }

    removeTile(x, y) {
        let orig = this.grid[x][y]
        this.grid[x][y] = EMPTY_TILE;
        return orig;
    }
}
