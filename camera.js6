import * as config from "gameconfig.js6";

export class Camera {

  /*
    x and y are the world coordinates of the center of the
    camera viewport.
    cellSize is the size of each world cell in pixels.
  */
  constructor(displayWidth, displayHeight, x, y) {
    this._displayWidth = displayWidth;
    this._displayHeight = displayHeight;
    this.setPositionCenter(x, y);
  }

  set x(x) {
    this._x = x;
  }

  set y(y) {
    this._y = y;
  }

  get x() {
    return this._x;
  }
  
  get y() {
    return this._y;
  }
  
  setPosition(x, y) {
    if (x < 0)
        x = 0;
    else if (x > config.worldWidth - this._displayWidth)
        x = config.worldWidth - this._displayWidth;
    if (y < 0)
        y = 0;
    else if (y > config.worldHeight - this._displayHeight)
        y = config.worldHeight - this._displayHeight;

    this._x = x;
    this._y = y;
  }

  setPositionCenter(x, y) {
    this.setPosition(x - this._displayWidth / 2, y - this._displayHeight / 2);
  }

  /*
    Move the camera to be centered on the given world coordinate position.
    This moves the camera at a constant speed until it reaches the target
    position.
  */
  follow(x, y) {
    var goalX = x - this._displayWidth / 2;
    var goalY = y - this._displayHeight / 2;

    //this.setPosition((this._x + (goalX - this._x)) / 2,
    //                 (this._y + (goalY - this._y)) / 2);
    /*
    var newX = this._x;
    var newY = this._y;
    if (this._x < goalX)
      newX += 2;
    else if (this._x > goalX)
      newX -= 2;
    if (this._y < goalY)
      newY += 2;
    else if (this._y > goalY)
      newY -= 2;
    this.setPosition(newX, newY);
    */

    // Directly to player
    this.setPosition(goalX, goalY);

    /*
    if (this._x < goalX)
      this._x += 2;
    else if (this._x > goalX)
      this._x -= 2;
    if (this._y < goalY)
      this._y += 2;
    else if (this._x > goalY)
      this._y -= 2;
    */
  }
  
  /*
    Returns the index of the first visible column within the camera viewport.
  */
  leftCell() {
    return Math.floor(this._x / config.cellSize);
  }

  /*
    Returns the index of the last visible column wihtin the camera viewport.
  */
  rightCell() {
    return Math.ceil((this._x + this._displayWidth) / config.cellSize);
  }

  /*
    Returns the index of the first visible row wihtin the camera viewport.
  */
  topCell() {
    return Math.floor(this._y / config.cellSize);
  }

  /*
    Returns the index of the last visible row wihtin the camera viewport.
  */
  bottomCell() {
    return Math.ceil((this._y + this._displayHeight) / config.cellSize);
  }

  /*
    Returns the horizontal pixel offset to apply to tiles in order to achieve
    sub-tile camera positions.
  */
  horizontalOffset() {
    return this._x % config.cellSize;
  }

  /*
     Returns the vertical pixel offset to apply to tiles in order to achieve
     sub-tile camera positions.
   */
  verticalOffset() {
    return this._y % config.cellSize;
  }
}

