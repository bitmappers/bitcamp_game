import * as config from "gameconfig.js6";
import {Grid} from "grid.js6";
import {Camera} from "camera.js6";

import {InputManager, KEYS} from "input.js6";
import {Player} from "player.js6";

class Game {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.canvas.width = config.screenWidth;
        this.canvas.height = config.screenHeight;
        this.ctx = this.canvas.getContext('2d');

        this.grid = new Grid(
                config.worldWidth / config.cellSize,
                config.worldHeight / config.cellSize);

        this.camera = new Camera(
                config.screenWidth, config.screenHeight,
                config.worldWidth / 2,
                config.worldHeight / 2,
                config.cellSize);

        this.inputManager = new InputManager();
        this.player = new Player(
                Math.floor(this.grid.width / 2),
                Math.floor(this.grid.height / 2 - 1),
                this);
    }

    start() {
        this._intervalID = setInterval(
                this.update.bind(this),
                1000 / config.updatesPerSecond);
    }

    stop() {
        clearInterval(this._intervalID);
        delete this._intervalID;
    }

    get isRunning() {
        return !!this._intervalID;
    }

    ///////////////////////////////////////////
    // Update shit
    ///////////////////////////////////////////
    update() {
        this.player.update();

        // Tell the browser we want to render shit
        requestAnimationFrame(this.draw.bind(this));
    }

    ///////////////////////////////////////////
    // Draw shit
    ///////////////////////////////////////////
    draw() {
        this.ctx.fillStyle = config.clearColor;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw the grid
        var leftCell = this.camera.leftCell();
        var rightCell = this.camera.rightCell();
        var topCell = this.camera.topCell();
        var bottomCell = this.camera.bottomCell();
        var hOffset = this.camera.horizontalOffset();
        var vOffset = this.camera.verticalOffset();
        //console.log(leftCell + "-" + rightCell + "(" + hOffset + "), "
        //            + topCell + "-" + bottomCell + "(" + vOffset + ") | "
        //            + this.camera.posX + ", " + this.camera.posY);
        for (let x = leftCell; x < rightCell; x++) {
            for (let y = topCell; y < bottomCell; y++) {
                this.grid.getCell(x, y).draw(
                        this.ctx,
                        (x - leftCell) * config.cellSize - hOffset,
                        (y - topCell) * config.cellSize - vOffset);
            }
        }
        this.player.draw(-this.camera.x, -this.camera.y);

        this.camera.follow(this.player.x * config.cellSize,
                           this.player.y * config.cellSize);
    }
}

$(function() {
    let game = new Game();
    game.start();

    $('#toggleGameButton').click(function() {
        if (game.isRunning) {
            game.stop();
        } else {
            game.start();
        }
    });
});
