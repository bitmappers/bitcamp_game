import * as config from "gameconfig.js6";
import {Grid} from "grid.js6";
import {Camera} from "camera.js6";

var TILE_TYPE = {
    EMPTY: 0,
    DIRT: 1,
    ROCK: 2
};

class Game {
    constructor() {
        this.canvas = document.getElementById('gameCanvas');
        this.canvas.width = config.screenWidth;
        this.canvas.height = config.screenHeight;
        this.ctx = this.canvas.getContext('2d');

        this.grid = new Grid(
                config.worldWidth / config.cellSize,
                config.worldHeight / config.cellSize);

        this.camera = new Camera(
                config.screenWidth, config.screenHeight,
                0, 650, config.cellSize);
    }

    run() {
        this.ctx.fillStyle = config.clearColor;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

        // Draw the grid
        var leftCell = this.camera.leftCell();
        var rightCell = this.camera.rightCell();
        var topCell = this.camera.topCell();
        var bottomCell = this.camera.bottomCell();
        var hOffset = this.camera.horizontalOffset();
        var vOffset = this.camera.verticalOffset();
        //console.log(leftCell + "-" + rightCell + "(" + hOffset + "), "
        //            + topCell + "-" + bottomCell + "(" + vOffset + ") | "
        //            + this.camera.posX + ", " + this.camera.posY);
        for (let x = leftCell; x < rightCell; x++) {
            for (let y = topCell; y < bottomCell; y++) {
                this.grid.getCell(x, y).draw(
                        this.ctx,
                        (x - leftCell) * config.cellSize - hOffset,
                        (y - topCell) * config.cellSize - vOffset);
            }
        }

        // Temporary shift camera
        this.camera.setPosition(this.camera.posX - 1, this.camera.posY + 1);

        // Maintain FPS
        let that = this;
        setTimeout(function() {that.run.apply(that);}, 1000 / config.FPS);
    }
}


$(function() {
    let game = new Game();
    game.run();
});
